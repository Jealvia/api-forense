"""
Ejemplo de uso del nuevo sistema modular de detecci√≥n de capas m√∫ltiples.

Este archivo demuestra c√≥mo usar el helper helpers/deteccion_capas.py
y las nuevas funciones integradas en riesgo.py.
"""

from helpers.deteccion_capas import LayerDetector, calculate_dynamic_penalty, RiskWeights
from riesgo import evaluar_capas_multiples_completo, calcular_penalizacion_capas_optimizada


def ejemplo_analisis_basico():
    """Ejemplo b√°sico de an√°lisis de capas m√∫ltiples."""
    print("=== EJEMPLO 1: An√°lisis B√°sico ===")
    
    # Simular datos de un PDF (en uso real ser√≠an bytes del archivo)
    pdf_bytes = b"PDF content here..."  # Datos reales del PDF
    extracted_text = "Texto extra√≠do del PDF con posibles superposiciones..."
    
    try:
        # Usar el detector modular directamente
        detector = LayerDetector(pdf_bytes, extracted_text, base_weight=15)
        resultado = detector.analyze()
        
        print(f"Capas detectadas: {resultado['has_layers']}")
        print(f"Probabilidad: {resultado['probability_percentage']:.1f}%")
        print(f"Nivel de riesgo: {resultado['risk_level']}")
        print(f"Confianza: {resultado['confidence']:.3f}")
        print(f"Penalizaci√≥n calculada: {resultado['penalty_points']} puntos")
        print(f"Indicadores: {resultado['indicators']}")
        
        # Desglose t√©cnico
        print("\n--- Desglose T√©cnico ---")
        print(f"Objetos OCG: {resultado['ocg_objects']}")
        print(f"Objetos superpuestos: {resultado['overlay_objects']}")
        print(f"Content streams: {resultado['content_streams']}")
        print(f"Estimaci√≥n de capas: {resultado['layer_count_estimate']}")
        
    except Exception as e:
        print(f"Error en an√°lisis: {e}")


def ejemplo_analisis_completo():
    """Ejemplo usando la funci√≥n de conveniencia integrada."""
    print("\n=== EJEMPLO 2: An√°lisis Completo con Funci√≥n de Conveniencia ===")
    
    pdf_bytes = b"PDF content here..."
    extracted_text = "Texto con superposiciones detectadas..."
    
    # Usar funci√≥n de conveniencia
    resultado = evaluar_capas_multiples_completo(pdf_bytes, extracted_text, base_weight=15)
    
    if "error" not in resultado:
        print(f"‚úÖ An√°lisis exitoso")
        print(f"üìä Probabilidad: {resultado['probability_percentage']:.1f}%")
        print(f"‚ö†Ô∏è Nivel: {resultado['risk_level']}")
        print(f"üí∞ Penalizaci√≥n: {resultado['penalty_points']} puntos")
        
        # Informaci√≥n de configuraci√≥n
        config = resultado.get('configuration', {})
        print(f"üîß Versi√≥n: {config.get('analysis_version')}")
        print(f"üîß Componentes: {config.get('components_analyzed')}")
        print(f"üîß Peso base: {config.get('base_weight_used')}")
        
        # Desglose de puntuaci√≥n
        if 'score_breakdown' in resultado:
            print("\n--- Desglose de Puntuaci√≥n ---")
            breakdown = resultado['score_breakdown']
            for component, score in breakdown.items():
                print(f"  {component}: {score:.3f}")
    else:
        print(f"‚ùå Error: {resultado['error']}")


def ejemplo_calculo_penalizacion():
    """Ejemplo de c√°lculo de penalizaci√≥n optimizada."""
    print("\n=== EJEMPLO 3: C√°lculo de Penalizaci√≥n Optimizada ===")
    
    # Casos de prueba con diferentes probabilidades
    casos_prueba = [
        {"prob": 15.0, "nivel": "VERY_LOW"},
        {"prob": 39.5, "nivel": "LOW"},      # Tu caso del ejemplo
        {"prob": 65.0, "nivel": "HIGH"},
        {"prob": 85.0, "nivel": "VERY_HIGH"},
        {"prob": 100.0, "nivel": "VERY_HIGH"}
    ]
    
    for caso in casos_prueba:
        resultado = calcular_penalizacion_capas_optimizada(
            probability_percentage=caso["prob"],
            risk_level=caso["nivel"],
            base_weight=15
        )
        
        print(f"\nüìä Probabilidad: {caso['prob']:.1f}% ({caso['nivel']})")
        print(f"üí∞ Penalizaci√≥n: {resultado['penalty_points']} puntos")
        print(f"üìù {resultado['explanation']}")
        
        # Desglose del c√°lculo
        breakdown = resultado['calculation_breakdown']
        print(f"   - M√©todo proporcional: {breakdown['proportional_method']} pts")
        print(f"   - M√©todo escalonado: {breakdown['scaled_method']} pts")
        print(f"   - M√©todo usado: {breakdown['method_used']}")


def ejemplo_comparacion_pesos():
    """Ejemplo comparando diferentes pesos base."""
    print("\n=== EJEMPLO 4: Comparaci√≥n de Pesos Base ===")
    
    probability = 39.5  # Tu ejemplo
    pesos_a_probar = [5, 10, 15, 20]  # Pesos actuales vs recomendados
    
    print(f"Para una probabilidad de {probability:.1f}%:\n")
    
    for peso in pesos_a_probar:
        penalizacion = calculate_dynamic_penalty(probability, peso)
        print(f"Peso base {peso:2d}: {penalizacion:2d} puntos")
    
    print(f"\nüéØ Recomendaci√≥n: Usar peso base {RiskWeights.BASE_WEIGHT} puntos")
    print(f"   Genera penalizaciones proporcionales al riesgo real")


def ejemplo_analisis_componentes():
    """Ejemplo mostrando an√°lisis detallado por componentes."""
    print("\n=== EJEMPLO 5: An√°lisis Detallado por Componentes ===")
    
    # Mostrar configuraci√≥n de pesos
    print("üîß Configuraci√≥n de Pesos por Componente:")
    for componente, peso in RiskWeights.COMPONENT_WEIGHTS.items():
        print(f"   {componente}: {peso:.2%}")
    
    print(f"\nüéØ Umbrales de Riesgo:")
    for nivel, umbral in RiskWeights.RISK_THRESHOLDS.items():
        print(f"   {nivel}: {umbral:.1%}+")
    
    print(f"\n‚öñÔ∏è Multiplicadores de Penalizaci√≥n:")
    for nivel, mult in RiskWeights.RISK_MULTIPLIERS.items():
        print(f"   {nivel}: {mult:.1%} del peso base")


def main():
    """Ejecuta todos los ejemplos."""
    print("üîç SISTEMA MODULAR DE DETECCI√ìN DE CAPAS M√öLTIPLES")
    print("=" * 60)
    
    # Ejemplos de an√°lisis
    ejemplo_analisis_basico()
    ejemplo_analisis_completo()
    
    # Ejemplos de c√°lculos
    ejemplo_calculo_penalizacion()
    ejemplo_comparacion_pesos()
    
    # Informaci√≥n de configuraci√≥n
    ejemplo_analisis_componentes()
    
    print("\n" + "=" * 60)
    print("‚úÖ Todos los ejemplos ejecutados correctamente")
    print("üìñ Documentaci√≥n completa en helpers/deteccion_capas.py")


if __name__ == "__main__":
    main()
