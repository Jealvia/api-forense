#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Endpoint para validar facturas PDF (nativas y escaneadas)
"""

import os
import sys
import base64
import io
import tempfile
import time
from typing import Dict, Any, Optional
from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from pdf_smart_text import extract_text_smart, validate_sri_access_key
from helpers.deteccion_texto_superpuesto import detectar_texto_superpuesto_detallado
from helpers.sri_validator import integrar_validacion_sri
from helpers.invoice_capture_parser import parse_capture_from_bytes
from helpers.pdf_factura_parser import extraer_datos_factura_pdf
from riesgo import evaluar_riesgo_factura
from config import RISK_WEIGHTS
import fitz  # PyMuPDF

router = APIRouter()


@router.post("/validar-factura")
async def validar_factura(pdfbase64: str) -> JSONResponse:
    """
    Valida una factura PDF (nativa o escaneada) usando an√°lisis inteligente
    Acepta solo archivo PDF en base64
    """
    try:
        # Decodificar base64
        try:
            archivo_bytes = base64.b64decode(pdfbase64)
        except Exception as e:
            raise HTTPException(status_code=400, detail=f"Error decodificando base64: {str(e)}")
        
        # Crear archivo temporal
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_file:
            temp_file.write(archivo_bytes)
            temp_path = temp_file.name
        
        try:
            # 1) An√°lisis robusto del PDF con OCR y validaci√≥n SRI
            print("üîç Analizando PDF con parser robusto...")
            t0 = time.perf_counter()
            
            # Usar el parser robusto que incluye OCR, correcci√≥n de errores y validaci√≥n SRI
            factura_data = extraer_datos_factura_pdf(archivo_bytes)
            
            # Extraer datos principales
            access_key = factura_data.get("claveAcceso")
            ruc = factura_data.get("ruc")
            razon_social = factura_data.get("razonSocial")
            fecha_emision = factura_data.get("fechaEmision")
            numero_factura = factura_data.get("numeroFactura")
            total = factura_data.get("total")
            subtotal_0 = factura_data.get("subtotal_0")
            subtotal_15 = factura_data.get("subtotal_15")
            iva_15 = factura_data.get("iva_15")
            full_text = factura_data.get("texto_ocr", "")
            fuentes = factura_data.get("fuentes", {})
            claves_barcode = fuentes.get("claves_barcode", [])
            
            print(f"‚úÖ PDF analizado con OCR robusto")
            print(f"   RUC: {ruc}")
            print(f"   Raz√≥n Social: {razon_social}")
            print(f"   Fecha: {fecha_emision}")
            print(f"   N√∫mero: {numero_factura}")
            print(f"   Clave Acceso: {access_key}")
            print(f"   Total: {total}")
            print(f"   Fuente barcode: {fuentes.get('barcode', False)}")
            print(f"   Claves barcode: {claves_barcode}")
            
            t1 = time.perf_counter()
            print(f"‚è±Ô∏è  Tiempo an√°lisis PDF: {t1-t0:.2f}s")
            
            # 2) An√°lisis de riesgo del PDF (temporalmente deshabilitado)
            print("üîç Evaluando riesgo del PDF...")
            # riesgo_result = evaluar_riesgo_factura(archivo_bytes)
            riesgo_result = {"nivel_riesgo": "BAJO", "puntuacion": 0, "grado_confianza": "ALTO", "porcentaje_confianza": 100.0}
            
            # 3) An√°lisis de texto superpuesto (temporalmente deshabilitado)
            print("üîç Analizando texto superpuesto...")
            # Convertir bytes a base64 para la funci√≥n
            # pdf_base64 = base64.b64encode(archivo_bytes).decode('utf-8')
            # overlay_analysis = detectar_texto_superpuesto_detallado(pdf_base64)
            overlay_analysis = {"capas": {}, "superposicion_texto": {}}
            
            # 4) Validaci√≥n SRI (si se solicita)
            sri_validation = {}
            if access_key:
                # Usar la validaci√≥n robusta del parser
                from helpers.invoice_capture_parser import validate_access_key
                clave_valida = validate_access_key(access_key)
                
                sri_validation = {
                    "es_documento_sri": True,
                    "clave_acceso": access_key,
                    "clave_valida": clave_valida,
                    "longitud_correcta": len(access_key) == 49,
                    "metodo_extraccion": "robusto_ocr",
                    "fuente_barcode": fuentes.get('barcode', False),
                    "claves_barcode": claves_barcode
                }
            else:
                sri_validation = {
                    "es_documento_sri": False,
                    "clave_acceso": None,
                    "clave_valida": False,
                    "longitud_correcta": False,
                    "metodo_extraccion": "no_disponible"
                }
            
            # 5) Los datos de barcodes ya est√°n limpios en claves_barcode
            
            # 6) Preparar datos de la factura para validaci√≥n SRI
            factura_data = {
                "ruc": ruc,
                "razonSocial": razon_social,
                "fechaEmision": fecha_emision,
                "importeTotal": total,
                "claveAcceso": access_key,
                "detalles": [],
                "totals": {
                    "subtotal15": subtotal_15,
                    "subtotal0": subtotal_0,
                    "subtotal_no_objeto": None,
                    "subtotal_sin_impuestos": None,
                    "descuento": None,
                    "iva15": iva_15,
                    "total": total
                },
                "barcodes": claves_barcode,
                "financial_checks": {},
                "metadata": {
                    "invoice_number": numero_factura,
                    "authorization": access_key,
                    "environment": "PRODUCCION" if access_key and access_key[23] == "1" else "PRUEBAS",
                    "buyer_id": None,
                    "emitter_name": razon_social,
                    "file_metadata": {
                        "sha256": None,  # TODO: Calcular hash
                        "pages_processed": 1,  # Asumimos 1 p√°gina por ahora
                        "text_methods": ["ocr_robusto"],
                        "text_length": len(full_text),
                        "fuente_barcode": fuentes.get('barcode', False)
                    }
                }
            }
            
            # 7) Integrar validaci√≥n SRI
            print(f"üîç Validando SRI con datos extra√≠dos...")
            print(f"   RUC: {ruc}")
            print(f"   Clave Acceso: {access_key}")
            print(f"   Total: {total}")
            
            factura_con_sri = integrar_validacion_sri(factura_data)
            
            # Extraer resultados de la validaci√≥n SRI
            sri_verificado = factura_con_sri.get("sri_verificado", False)
            mensaje_sri = factura_con_sri.get("mensaje", "No disponible")
            
            print(f"‚úÖ Validaci√≥n SRI completada: {sri_verificado}")
            print(f"   Mensaje: {mensaje_sri}")
            
            # 9) Limpiar datos para evitar problemas de serializaci√≥n JSON
            def clean_for_json(obj):
                """Funci√≥n recursiva para limpiar datos y hacerlos serializables a JSON"""
                if isinstance(obj, dict):
                    return {k: clean_for_json(v) for k, v in obj.items()}
                elif isinstance(obj, list):
                    return [clean_for_json(item) for item in obj]
                elif isinstance(obj, bytes):
                    try:
                        return obj.decode('utf-8')
                    except UnicodeDecodeError:
                        return base64.b64encode(obj).decode('utf-8')
                elif isinstance(obj, (str, int, float, bool, type(None))):
                    return obj
                else:
                    return str(obj)
            
            # Limpiar todos los datos antes de construir la respuesta
            factura_con_sri_clean = clean_for_json(factura_con_sri)
            riesgo_result_clean = clean_for_json(riesgo_result)
            access_key_parsed_clean = clean_for_json(factura_data.get("access_key_parsed", {}))
            
            # 10) Construir respuesta
            response = {
                "sri_verificado": sri_verificado,
                "mensaje": mensaje_sri,
                "tipo_archivo": "PDF",
                "coincidencia": "si" if sri_verificado else "no",
                "diferencias": {},
                "diferenciasProductos": [],
                "resumenProductos": {
                    "num_sri": 0,
                    "num_imagen": 0,
                    "total_sri_items": 0,
                    "total_imagen_items": 0
                },
                "factura": factura_con_sri_clean,
                "clave_acceso_parseada": access_key_parsed_clean,
                "riesgo": riesgo_result_clean,
                "validacion_firmas": {
                    "resumen": {
                        "total_firmas": 0,
                        "firmas_validas": 0,
                        "firmas_invalidas": 0,
                        "con_certificados": 0,
                        "con_timestamps": 0,
                        "con_politicas": 0,
                        "porcentaje_validas": 0
                    },
                    "dependencias": {
                        "asn1crypto": False,
                        "oscrypto": False,
                        "certvalidator": False
                    },
                    "analisis_sri": sri_validation,
                    "validacion_pdf": {
                        "firma_detectada": False,
                        "tipo_firma": "ninguna",
                        "es_pades": False,
                        "metadatos": {
                            "numero_firmas": 0
                        }
                    },
                    "tipo_documento": "pdf",
                    "firma_detectada": False
                },
                "analisis_detallado": {
                    "tipo_archivo": {
                        "tipo": "PDF",
                        "extension": "pdf",
                        "mime_type": "application/pdf",
                        "valido": True
                    },
                    "metadatos": {
                        "exif": {},
                        "iptc": {},
                        "xmp": {},
                        "basicos": {
                            "formato": "PDF",
                            "modo": "nativo/escaneado",
                            "tama√±o": [0, 0],  # TODO: Obtener dimensiones
                            "ancho": 0,
                            "alto": 0,
                            "has_transparency": False
                        },
                        "sospechosos": []
                    },
                    "capas": clean_for_json(overlay_analysis.get("capas", {})),
                    "superposicion_texto": clean_for_json(overlay_analysis.get("superposicion_texto", {})),
                    "analisis_forense": {
                        "hashes": {
                            "md5": None,  # TODO: Calcular hashes
                            "sha1": None,
                            "sha256": None,
                            "sha512": None,
                            "blake2b": None,
                            "timestamp": None,
                            "phash": None,
                            "dhash": None,
                            "whash": None,
                            "colorhash": None,
                            "crop_resistant_hash": None
                        },
                        "timestamp_analisis": None,
                        "tipo_archivo": "PDF",
                        "ela": {
                            "ela_mean": 0.0,
                            "ela_std": 0.0,
                            "ela_max": 0,
                            "porcentaje_sospechoso": 0.0,
                            "edge_density": 0.0,
                            "tiene_ediciones": False,
                            "nivel_sospecha": "NORMAL"
                        },
                        "doble_compresion": {
                            "tiene_doble_compresion": False,
                            "periodicidad_detectada": False,
                            "varianza_alta": False,
                            "num_peaks": 0,
                            "ac_variance": 0.0,
                            "dc_variance": 0.0,
                            "confianza": "BAJA"
                        },
                        "ruido_bordes": {
                            "laplacian_variance": 0.0,
                            "edge_density": 0.0,
                            "num_lines": 0,
                            "parallel_lines": 0,
                            "outlier_ratio": 0.0,
                            "gradient_peaks": 0,
                            "peak_ratio": 0.0,
                            "tiene_edicion_local": False,
                            "nivel_sospecha": "BAJO"
                        },
                        "phash_bloques": {
                            "num_bloques": 0,
                            "mean_difference": 0.0,
                            "std_difference": 0.0,
                            "max_difference": 0,
                            "outlier_ratio": 0.0,
                            "tiene_diferencias_locales": False,
                            "nivel_sospecha": "BAJO"
                        },
                        "ssim_regional": {
                            "num_comparaciones": 0,
                            "mean_ssim": 0.0,
                            "std_ssim": 0.0,
                            "min_ssim": 0.0,
                            "low_similarity_ratio": 0.0,
                            "tiene_inconsistencias": False,
                            "nivel_sospecha": "BAJO"
                        },
                        "grado_confianza": {
                            "grado_confianza": "ALTO",
                            "porcentaje_confianza": 100.0,
                            "puntuacion": 0,
                            "max_puntuacion": 0,
                            "evidencias": [],
                            "justificacion": "PDF nativo - sin evidencia de manipulaci√≥n",
                            "recomendacion": "DOCUMENTO APARENTEMENTE AUT√âNTICO"
                        }
                    },
                    "probabilidad_manipulacion": 0.0,
                    "nivel_riesgo": "LOW",
                    "indicadores_sospechosos": [],
                    "resumen": {
                        "tiene_metadatos_sospechosos": False,
                        "tiene_texto_superpuesto": overlay_analysis.get("superposicion_texto", {}).get("tiene_texto_superpuesto", False),
                        "tiene_capas_ocultas": overlay_analysis.get("capas", {}).get("capas_ocultas", 0) > 0,
                        "tiene_evidencias_forenses": False,
                        "total_indicadores": 0
                    }
                },
                "texto_extraido": clean_for_json(full_text),
                "parser_avanzado": {
                    "disponible": True,
                    "barcodes_detectados": len(factura_data.get("barcodes", [])),
                    "items_detectados": 0,
                    "validaciones_financieras": {},
                    "metadatos_avanzados": {
                        "pages_processed": 1,  # Asumimos 1 p√°gina por ahora
                        "text_methods": ["ocr_robusto"],
                        "text_length": len(full_text),
                        "access_key_found": access_key is not None,
                        "barcodes_found": len(factura_data.get("barcodes", [])) > 0
                    }
                }
            }
            
            print(f"‚úÖ An√°lisis completado en {time.perf_counter() - t0:.2f}s")
            
            return JSONResponse(content=response)
            
        finally:
            # Limpiar archivo temporal
            try:
                os.unlink(temp_path)
            except:
                pass
                
    except Exception as e:
        print(f"‚ùå Error en validar_factura: {e}")
        import traceback
        print(f"   Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Error procesando PDF: {str(e)}")
